/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
export const MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
export class ModuleMapNgFactoryLoader {
    /**
     * @param {?} compiler
     * @param {?} moduleMap
     */
    constructor(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    load(loadChildrenString) {
        /** @type {?} */
        const offlineMode = this.compiler instanceof Compiler;
        /** @type {?} */
        const type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);
        }
        return offlineMode ?
            this.loadFactory((/** @type {?} */ (type))) : this.loadAndCompile((/** @type {?} */ (type)));
    }
    /**
     * @private
     * @param {?} factory
     * @return {?}
     */
    loadFactory(factory) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => resolve(factory)));
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    loadAndCompile(type) {
        return this.compiler.compileModuleAsync(type);
    }
}
ModuleMapNgFactoryLoader.ɵfac = function ModuleMapNgFactoryLoader_Factory(t) { return new (t || ModuleMapNgFactoryLoader)(ɵngcc0.ɵɵinject(ɵngcc0.Compiler), ɵngcc0.ɵɵinject(MODULE_MAP)); };
ModuleMapNgFactoryLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModuleMapNgFactoryLoader, factory: ModuleMapNgFactoryLoader.ɵfac });
/** @nocollapse */
ModuleMapNgFactoryLoader.ctorParameters = () => [
    { type: Compiler },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModuleMapNgFactoryLoader, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Compiler }, { type: undefined, decorators: [{
                type: Inject,
                args: [MODULE_MAP]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    ModuleMapNgFactoryLoader.prototype.moduleMap;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci9zcmMvbW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUNMLFVBQVUsRUFFVixjQUFjLEVBRWQsTUFBTSxFQUVOLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QjtBQUFJO0FBR2lCO0FBQWE7O0FBRWxDLE1BQU0sT0FBTyxVQUFVLEdBQThCLElBQUksY0FBYyxDQUFDLFlBQVksQ0FBQztBQUNyRjtBQUNHO0FBQzhDO0FBR2pELE1BQU0sT0FBTyx3QkFBd0I7QUFBRztBQUFRO0FBQzlDO0FBQTRCO0FBQVEsSUFBcEMsWUFBb0IsUUFBa0IsRUFBOEIsU0FBb0I7QUFBSSxRQUF4RSxhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFBNkIsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLElBQUcsQ0FBQztBQUMvRjtBQUNPO0FBQXFDO0FBQW1CO0FBQzVELElBREQsSUFBSSxDQUFDLGtCQUEwQjtBQUFJO0FBQXlCLGNBQ3BELFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxZQUFZLFFBQVE7QUFDekQ7QUFBeUIsY0FBZixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQztBQUNuRCxRQUNJLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDZixZQUFNLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxrQkFBa0Isa0NBQWtDLENBQUMsQ0FBQztBQUMvRSxTQUFLO0FBQ0wsUUFDSSxPQUFPLFdBQVcsQ0FBQyxDQUFDO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBdUIsSUFBSSxFQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBWSxJQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQzVGLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFBMEI7QUFBbUI7QUFBUSxJQUFsRSxXQUFXLENBQUMsT0FBNkI7QUFBSSxRQUNuRCxPQUFPLElBQUksT0FBTztBQUFNO0FBRzVCO0FBQXVCO0FBQVksUUFIWixPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDO0FBQ3BELElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFBdUI7QUFBbUI7QUFBUSxJQUEvRCxjQUFjLENBQUMsSUFBZTtBQUFJLFFBQ3hDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSDtvREF2QkMsVUFBVTt3SUFDVDtBQUFDO0FBQW1CO0FBQWtELFlBYnRFLFFBQVE7QUFDUCw0Q0Fhd0MsTUFBTSxTQUFDLFVBQVU7QUFBUTs7Ozs7O2tDQUFFO0FBQUM7QUFBYTtBQUFRO0FBRWhGO0FBQWdCO0FBQVEsSUFGdEIsNENBQTBCO0FBQUM7QUFBUTtBQUFpQjtBQUFnQjtBQUFRLElBQWhELDZDQUFnRDtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7XG4gIEluamVjdGFibGUsXG4gIE5nTW9kdWxlRmFjdG9yeUxvYWRlcixcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIE5nTW9kdWxlRmFjdG9yeSxcbiAgSW5qZWN0LFxuICBUeXBlLFxuICBDb21waWxlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TW9kdWxlTWFwfSBmcm9tICcuL21vZHVsZS1tYXAnO1xuXG4vKipcbiAqIFRva2VuIHVzZWQgYnkgdGhlIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciB0byBsb2FkIG1vZHVsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IE1PRFVMRV9NQVA6IEluamVjdGlvblRva2VuPE1vZHVsZU1hcD4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ01PRFVMRV9NQVAnKTtcblxuLyoqXG4gKiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgaW1wbGVtZW50cyBOZ01vZHVsZUZhY3RvcnlMb2FkZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBpbGVyOiBDb21waWxlciwgQEluamVjdChNT0RVTEVfTUFQKSBwcml2YXRlIG1vZHVsZU1hcDogTW9kdWxlTWFwKSB7IH1cblxuICBsb2FkKGxvYWRDaGlsZHJlblN0cmluZzogc3RyaW5nKTogUHJvbWlzZTxOZ01vZHVsZUZhY3Rvcnk8YW55Pj4ge1xuICAgIGNvbnN0IG9mZmxpbmVNb2RlID0gdGhpcy5jb21waWxlciBpbnN0YW5jZW9mIENvbXBpbGVyO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLm1vZHVsZU1hcFtsb2FkQ2hpbGRyZW5TdHJpbmddO1xuXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bG9hZENoaWxkcmVuU3RyaW5nfSBkaWQgbm90IGV4aXN0IGluIHRoZSBNT0RVTEVfTUFQYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZmxpbmVNb2RlID9cbiAgICAgIHRoaXMubG9hZEZhY3RvcnkoPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB0eXBlKSA6IHRoaXMubG9hZEFuZENvbXBpbGUoPFR5cGU8YW55Pj4gdHlwZSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRGYWN0b3J5KGZhY3Rvcnk6IE5nTW9kdWxlRmFjdG9yeTxhbnk+KTogUHJvbWlzZTxOZ01vZHVsZUZhY3Rvcnk8YW55Pj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmUoZmFjdG9yeSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQW5kQ29tcGlsZSh0eXBlOiBUeXBlPGFueT4pOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcGlsZXIuY29tcGlsZU1vZHVsZUFzeW5jKHR5cGUpO1xuICB9XG59XG4iXX0=