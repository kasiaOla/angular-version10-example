import * as tslib_1 from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule, NgModuleFactoryLoader } from '@angular/core';
import { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';
/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
import * as ɵngcc0 from '@angular/core';
export function provideModuleMap(moduleMap) {
    return {
        provide: MODULE_MAP,
        useValue: moduleMap
    };
}
/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapLoaderModule = /** @class */ (function () {
    function ModuleMapLoaderModule() {
    }
    ModuleMapLoaderModule_1 = ModuleMapLoaderModule;
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    ModuleMapLoaderModule.withMap = function (moduleMap) {
        return {
            ngModule: ModuleMapLoaderModule_1,
            providers: [
                {
                    provide: MODULE_MAP,
                    useValue: moduleMap
                }
            ]
        };
    };
    var ModuleMapLoaderModule_1;
ModuleMapLoaderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ModuleMapLoaderModule });
ModuleMapLoaderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ModuleMapLoaderModule_Factory(t) { return new (t || ModuleMapLoaderModule)(); }, providers: [
        {
            provide: NgModuleFactoryLoader,
            useClass: ModuleMapNgFactoryLoader
        }
    ] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModuleMapLoaderModule, [{
        type: NgModule,
        args: [{
                providers: [
                    {
                        provide: NgModuleFactoryLoader,
                        useClass: ModuleMapNgFactoryLoader
                    }
                ]
            }]
    }], function () { return []; }, null); })();
    return ModuleMapLoaderModule;
}());
export { ModuleMapLoaderModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1sb2FkZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci9zcmMvbW9kdWxlLW1hcC1sb2FkZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsT0FBTyxFQUNMLFFBQVEsRUFDUixxQkFBcUIsRUFHdEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsU0FBb0I7QUFBSSxJQUN2RCxPQUFPO0FBQ1QsUUFBSSxPQUFPLEVBQUUsVUFBVTtBQUN2QixRQUFJLFFBQVEsRUFBRSxTQUFTO0FBQ3ZCLEtBQUcsQ0FBQztBQUNKLENBQUM7QUFFRDtBQUNBO0FBQ0EsR0FBRztBQVNIO0FBRWMsSUFGZDtBQUFtQyxJQWlCbkMsQ0FBQztBQUNELDhCQWxCYSxxQkFBcUI7QUFBRSxJQUNsQztBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFTLDZCQUFPLEdBQWQsVUFBZSxTQUFvQjtBQUFJLFFBQ3JDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSx1QkFBcUI7QUFDckMsWUFBTSxTQUFTLEVBQUU7QUFDakIsZ0JBQVE7QUFDUixvQkFBVSxPQUFPLEVBQUUsVUFBVTtBQUM3QixvQkFBVSxRQUFRLEVBQUUsU0FBUztBQUM3QixpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDRjtJQWpCWSxxQkFBcUIsMERBUmpDO0lBQVEsQ0FBQyxjQUNSLFNBQVMsRUFBRSxrQkFDVCxzQkFDRSxPQUFPLEVBQUUscUJBQXFCLHNCQUM5QixRQUFRLEVBQUUsd0JBQXdCO09BQ25DO1dBQ0YsVUFDRixDQUFDLFFBQ1c7T0FBcUIsQ0FpQmpDOzs7Ozs7Ozs7Ozs7O2dEQUNEO0FBQUMsSUFERCw0QkFBQztBQUNBLENBREEsQUFqQkQsSUFpQkM7QUFDRCxTQWxCYSxxQkFBcUI7QUFDakMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7XG4gIE5nTW9kdWxlLFxuICBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXG4gIFN0YXRpY1Byb3ZpZGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIsIE1PRFVMRV9NQVAgfSBmcm9tICcuL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlcic7XG5pbXBvcnQge01vZHVsZU1hcH0gZnJvbSAnLi9tb2R1bGUtbWFwJztcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHByb3ZpZGVycyBvYmplY3QgZm9yIHRoZSBNT0RVTEVfTUFQXG4gKlxuICogQHBhcmFtIG1vZHVsZU1hcCBNYXAgdG8gdXNlIGFzIGEgdmFsdWUgZm9yIE1PRFVMRV9NQVBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVNb2R1bGVNYXAobW9kdWxlTWFwOiBNb2R1bGVNYXApOiBTdGF0aWNQcm92aWRlciB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogTU9EVUxFX01BUCxcbiAgICB1c2VWYWx1ZTogbW9kdWxlTWFwXG4gIH07XG59XG5cbi8qKlxuICogTW9kdWxlIGZvciB1c2luZyBhIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB3aGljaCBkb2VzIG5vdCBsYXp5IGxvYWRcbiAqL1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTmdNb2R1bGVGYWN0b3J5TG9hZGVyLFxuICAgICAgdXNlQ2xhc3M6IE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlclxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNb2R1bGVNYXBMb2FkZXJNb2R1bGUge1xuICAvKipcbiAgICogUmV0dXJucyBhIE1vZHVsZU1hcExvYWRlck1vZHVsZSBhbG9uZyB3aXRoIGEgTU9EVUxFX01BUFxuICAgKlxuICAgKiBAcGFyYW0gbW9kdWxlTWFwIE1hcCB0byB1c2UgYXMgYSB2YWx1ZSBmb3IgTU9EVUxFX01BUFxuICAgKi9cbiAgc3RhdGljIHdpdGhNYXAobW9kdWxlTWFwOiBNb2R1bGVNYXApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1vZHVsZU1hcExvYWRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTU9EVUxFX01BUCxcbiAgICAgICAgICB1c2VWYWx1ZTogbW9kdWxlTWFwXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=