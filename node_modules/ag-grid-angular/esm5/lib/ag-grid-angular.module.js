import { __decorate } from "tslib";
import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { AgGridAngular } from './ag-grid-angular.component';
import { AgGridColumn } from './ag-grid-column.component';
import * as ɵngcc0 from '@angular/core';
var AgGridModule = /** @class */ (function () {
    function AgGridModule() {
    }
    AgGridModule_1 = AgGridModule;
    AgGridModule.withComponents = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    AgGridModule.forRoot = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    var AgGridModule_1;
AgGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgGridModule });
AgGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AgGridModule_Factory(t) { return new (t || AgGridModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgGridModule, { declarations: function () { return [AgGridAngular, AgGridColumn]; }, exports: function () { return [AgGridAngular, AgGridColumn]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgGridModule, [{
        type: NgModule,
        args: [{
                declarations: [AgGridAngular, AgGridColumn],
                imports: [],
                exports: [AgGridAngular, AgGridColumn]
            }]
    }], function () { return []; }, null); })();
    return AgGridModule;
}());
export { AgGridModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWctZ3JpZC1hbmd1bGFyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L2FnLWdyaWQtYW5ndWxhci9saWIvYWctZ3JpZC1hbmd1bGFyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLDRCQUE0QixFQUF1QixRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFMUYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7QUFPeEQ7QUFDb0IsSUFEcEI7QUFBMEIsSUFtQjFCLENBQUM7QUFDRCxxQkFwQmEsWUFBWTtBQUFFLElBQ2hCLDJCQUFjLEdBQXJCLFVBQXNCLFVBQWdCO0FBQUksUUFDdEMsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLGNBQVk7QUFDbEMsWUFBWSxTQUFTLEVBQUU7QUFDdkIsZ0JBQWdCLEVBQUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztBQUMxRixhQUFhO0FBQ2IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBRUwsSUFBVyxvQkFBTyxHQUFkLFVBQWUsVUFBZ0I7QUFBSSxRQUMvQixPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsY0FBWTtBQUNsQyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsRUFBQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO0FBQzFGLGFBQWE7QUFDYixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFFTDtJQW5CYSxZQUFZLHlDQUx4QixRQUFRLENBQUM7V0FDTixZQUFZLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLGNBQzNDLE9BQU8sRUFBRSxFQUFFLGNBQ1gsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxVQUN6QyxDQUFDO0tBQ1csWUFBWSxDQW1CeEI7Ozs7Ozs7O2dEQUNEO0FBQUMsSUFERCxtQkFBQztBQUNBLENBREEsQUFuQkQsSUFtQkM7QUFDRCxTQXBCYSxZQUFZO0FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QWdHcmlkQW5ndWxhcn0gZnJvbSAnLi9hZy1ncmlkLWFuZ3VsYXIuY29tcG9uZW50JztcbmltcG9ydCB7QWdHcmlkQ29sdW1ufSBmcm9tICcuL2FnLWdyaWQtY29sdW1uLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbQWdHcmlkQW5ndWxhciwgQWdHcmlkQ29sdW1uXSxcbiAgICBpbXBvcnRzOiBbXSxcbiAgICBleHBvcnRzOiBbQWdHcmlkQW5ndWxhciwgQWdHcmlkQ29sdW1uXVxufSlcbmV4cG9ydCBjbGFzcyBBZ0dyaWRNb2R1bGUge1xuICAgIHN0YXRpYyB3aXRoQ29tcG9uZW50cyhjb21wb25lbnRzPzogYW55KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQWdHcmlkTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge3Byb3ZpZGU6IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIHVzZVZhbHVlOiBjb21wb25lbnRzLCBtdWx0aTogdHJ1ZX1cbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGZvclJvb3QoY29tcG9uZW50cz86IGFueSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEFnR3JpZE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtwcm92aWRlOiBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCB1c2VWYWx1ZTogY29tcG9uZW50cywgbXVsdGk6IHRydWV9XG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH1cblxufVxuIl19