import { __decorate } from "tslib";
import { ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { AgGridAngular } from './ag-grid-angular.component';
import { AgGridColumn } from './ag-grid-column.component';
import * as ɵngcc0 from '@angular/core';
var AgGridModule = /** @class */ (function () {
    function AgGridModule() {
    }
    AgGridModule_1 = AgGridModule;
    AgGridModule.withComponents = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    AgGridModule.forRoot = function (components) {
        return {
            ngModule: AgGridModule_1,
            providers: [
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: components, multi: true }
            ],
        };
    };
    var AgGridModule_1;
AgGridModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AgGridModule });
AgGridModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AgGridModule_Factory(t) { return new (t || AgGridModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgGridModule, { declarations: function () { return [AgGridAngular, AgGridColumn]; }, exports: function () { return [AgGridAngular, AgGridColumn]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgGridModule, [{
        type: NgModule,
        args: [{
                declarations: [AgGridAngular, AgGridColumn],
                imports: [],
                exports: [AgGridAngular, AgGridColumn]
            }]
    }], function () { return []; }, null); })();
    return AgGridModule;
}());
export { AgGridModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWctZ3JpZC1hbmd1bGFyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0BhZy1ncmlkLWNvbW11bml0eS9hbmd1bGFyL2xpYi9hZy1ncmlkLWFuZ3VsYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsNEJBQTRCLEVBQXVCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDRCQUE0QixDQUFDOztBQU94RDtBQUNvQixJQURwQjtBQUEwQixJQW1CMUIsQ0FBQztBQUNELHFCQXBCYSxZQUFZO0FBQUUsSUFDaEIsMkJBQWMsR0FBckIsVUFBc0IsVUFBZ0I7QUFBSSxRQUN0QyxPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsY0FBWTtBQUNsQyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsRUFBQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO0FBQzFGLGFBQWE7QUFDYixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFFTCxJQUFXLG9CQUFPLEdBQWQsVUFBZSxVQUFnQjtBQUFJLFFBQy9CLE9BQU87QUFDZixZQUFZLFFBQVEsRUFBRSxjQUFZO0FBQ2xDLFlBQVksU0FBUyxFQUFFO0FBQ3ZCLGdCQUFnQixFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7QUFDMUYsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUVMO0lBbkJhLFlBQVkseUNBTHhCLFFBQVEsQ0FBQztXQUNOLFlBQVksRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsY0FDM0MsT0FBTyxFQUFFLEVBQUUsY0FDWCxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLFVBQ3pDLENBQUM7S0FDVyxZQUFZLENBbUJ4Qjs7Ozs7Ozs7Z0RBQ0Q7QUFBQyxJQURELG1CQUFDO0FBQ0EsQ0FEQSxBQW5CRCxJQW1CQztBQUNELFNBcEJhLFlBQVk7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtBZ0dyaWRBbmd1bGFyfSBmcm9tICcuL2FnLWdyaWQtYW5ndWxhci5jb21wb25lbnQnO1xuaW1wb3J0IHtBZ0dyaWRDb2x1bW59IGZyb20gJy4vYWctZ3JpZC1jb2x1bW4uY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtBZ0dyaWRBbmd1bGFyLCBBZ0dyaWRDb2x1bW5dLFxuICAgIGltcG9ydHM6IFtdLFxuICAgIGV4cG9ydHM6IFtBZ0dyaWRBbmd1bGFyLCBBZ0dyaWRDb2x1bW5dXG59KVxuZXhwb3J0IGNsYXNzIEFnR3JpZE1vZHVsZSB7XG4gICAgc3RhdGljIHdpdGhDb21wb25lbnRzKGNvbXBvbmVudHM/OiBhbnkpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBBZ0dyaWRNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7cHJvdmlkZTogQU5BTFlaRV9GT1JfRU5UUllfQ09NUE9ORU5UUywgdXNlVmFsdWU6IGNvbXBvbmVudHMsIG11bHRpOiB0cnVlfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9yUm9vdChjb21wb25lbnRzPzogYW55KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQWdHcmlkTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge3Byb3ZpZGU6IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIHVzZVZhbHVlOiBjb21wb25lbnRzLCBtdWx0aTogdHJ1ZX1cbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfVxuXG59XG4iXX0=