import { __decorate, __metadata } from "tslib";
import { Observable, Subject } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var MdbTableService = /** @class */ (function () {
    function MdbTableService() {
        this._dataSource = [];
        this._dataSourceChanged = new Subject();
    }
    MdbTableService.prototype.addRow = function (newRow) {
        this.getDataSource().push(newRow);
    };
    MdbTableService.prototype.addRowAfter = function (index, row) {
        this.getDataSource().splice(index, 0, row);
    };
    MdbTableService.prototype.removeRow = function (index) {
        this.getDataSource().splice(index, 1);
    };
    MdbTableService.prototype.rowRemoved = function () {
        var rowRemoved = new Observable(function (observer) {
            observer.next(true);
        });
        return rowRemoved;
    };
    MdbTableService.prototype.removeLastRow = function () {
        this.getDataSource().pop();
    };
    MdbTableService.prototype.getDataSource = function () {
        return this._dataSource;
    };
    MdbTableService.prototype.setDataSource = function (data) {
        this._dataSource = data;
        this._dataSourceChanged.next(this.getDataSource());
    };
    MdbTableService.prototype.dataSourceChange = function () {
        return this._dataSourceChanged;
    };
    MdbTableService.prototype.filterLocalDataBy = function (searchKey) {
        return this.getDataSource().filter(function (obj) {
            return Object.keys(obj).some(function (key) {
                if (obj[key]) {
                    return obj[key]
                        .toString()
                        .toLowerCase()
                        .includes(searchKey);
                }
            });
        });
    };
    MdbTableService.prototype.searchLocalDataBy = function (searchKey) {
        if (!searchKey) {
            return this.getDataSource();
        }
        if (searchKey) {
            return this.filterLocalDataBy(searchKey.toLowerCase());
        }
    };
    MdbTableService.prototype.searchDataObservable = function (searchKey) {
        var _this = this;
        var observable = new Observable(function (observer) {
            observer.next(_this.searchLocalDataBy(searchKey));
        });
        return observable;
    };
    MdbTableService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MdbTableService_Factory() { return new MdbTableService(); }, token: MdbTableService, providedIn: "root" });
    MdbTableService = __decorate([ __metadata("design:paramtypes", [])
    ], MdbTableService);
MdbTableService.ɵfac = function MdbTableService_Factory(t) { return new (t || MdbTableService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbTableService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return MdbTableService;
}());
export { MdbTableService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWJvb3RzdHJhcC1tZC9saWIvZnJlZS90YWJsZXMvc2VydmljZXMvbWRiLXRhYmxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBSUE7QUFDb0IsSUFFbEI7QUFFUyxRQUpELGdCQUFXLEdBQVEsRUFBRSxDQUFDO0FBQ2hDLFFBQVUsdUJBQWtCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7QUFDaEUsSUFBaUIsQ0FBQztBQUNsQixJQUNFLGdDQUFNLEdBQU4sVUFBTyxNQUFXO0FBQ3BCLFFBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFFSCxJQUFFLHFDQUFXLEdBQVgsVUFBWSxLQUFhLEVBQUUsR0FBUTtBQUNyQyxRQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMvQyxJQUFFLENBQUM7QUFFSCxJQUFFLG1DQUFTLEdBQVQsVUFBVSxLQUFhO0FBQ3pCLFFBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBRUgsSUFBRSxvQ0FBVSxHQUFWO0FBQWMsUUFDWixJQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBVSxVQUFDLFFBQWE7QUFBSSxZQUMzRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFJLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLElBQUUsQ0FBQztBQUVILElBQUUsdUNBQWEsR0FBYjtBQUFjLFFBQ1osSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQy9CLElBQUUsQ0FBQztBQUVILElBQUUsdUNBQWEsR0FBYjtBQUFjLFFBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUVILElBQUUsdUNBQWEsR0FBYixVQUFjLElBQVM7QUFDekIsUUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUM1QixRQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBRUgsSUFBRSwwQ0FBZ0IsR0FBaEI7QUFBYyxRQUNaLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0FBQ25DLElBQUUsQ0FBQztBQUVILElBQUUsMkNBQWlCLEdBQWpCLFVBQWtCLFNBQWM7QUFDbEMsUUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFlO0FBQUksWUFDckQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQVE7QUFBSSxnQkFDeEMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDdEIsb0JBQVUsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDO0FBQ3pCLHlCQUFhLFFBQVEsRUFBRTtBQUN2Qix5QkFBYSxXQUFXLEVBQUU7QUFDMUIseUJBQWEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLGlCQUFTO0FBQ1QsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFFSCxJQUFFLDJDQUFpQixHQUFqQixVQUFrQixTQUFjO0FBQ2xDLFFBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUNwQixZQUFNLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ2xDLFNBQUs7QUFDTCxRQUNJLElBQUksU0FBUyxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDN0QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVILElBQUUsOENBQW9CLEdBQXBCLFVBQXFCLFNBQWM7QUFBSSxRQUF2QyxpQkFLQztBQUNILFFBTEksSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBQyxRQUFhO0FBQUksWUFDbEQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN2RCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLFVBQVUsQ0FBQztBQUN0QixJQUFFLENBQUM7QUFDRjtBQUNnTCxJQXZFcEssZUFBZSx3QkFIM0IsVUFBVSxDQUFDLGNBQ1YsbENBRU07T0FGSSxFQUFFLE1BQU0sZkFHTixPQURELGVBQWUsQ0FzRTNCO0NBdkVBLENBQUM7Ozs7OztnREF3RUY7QUFBQywwQkE3RUQ7QUFBRSxDQTRFRCxBQXRFRCxJQXNFQztBQUNELFNBdkVhLGVBQWU7QUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJUYWJsZVNlcnZpY2Uge1xuICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnkgPSBbXTtcbiAgcHJpdmF0ZSBfZGF0YVNvdXJjZUNoYW5nZWQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGFkZFJvdyhuZXdSb3c6IGFueSkge1xuICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpLnB1c2gobmV3Um93KTtcbiAgfVxuXG4gIGFkZFJvd0FmdGVyKGluZGV4OiBudW1iZXIsIHJvdzogYW55KSB7XG4gICAgdGhpcy5nZXREYXRhU291cmNlKCkuc3BsaWNlKGluZGV4LCAwLCByb3cpO1xuICB9XG5cbiAgcmVtb3ZlUm93KGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmdldERhdGFTb3VyY2UoKS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgcm93UmVtb3ZlZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByb3dSZW1vdmVkID0gbmV3IE9ic2VydmFibGU8Ym9vbGVhbj4oKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgIG9ic2VydmVyLm5leHQodHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJvd1JlbW92ZWQ7XG4gIH1cblxuICByZW1vdmVMYXN0Um93KCkge1xuICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpLnBvcCgpO1xuICB9XG5cbiAgZ2V0RGF0YVNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZTtcbiAgfVxuXG4gIHNldERhdGFTb3VyY2UoZGF0YTogYW55KSB7XG4gICAgdGhpcy5fZGF0YVNvdXJjZSA9IGRhdGE7XG4gICAgdGhpcy5fZGF0YVNvdXJjZUNoYW5nZWQubmV4dCh0aGlzLmdldERhdGFTb3VyY2UoKSk7XG4gIH1cblxuICBkYXRhU291cmNlQ2hhbmdlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VDaGFuZ2VkO1xuICB9XG5cbiAgZmlsdGVyTG9jYWxEYXRhQnkoc2VhcmNoS2V5OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhU291cmNlKCkuZmlsdGVyKChvYmo6IEFycmF5PGFueT4pID0+IHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnNvbWUoKGtleTogYW55KSA9PiB7XG4gICAgICAgIGlmIChvYmpba2V5XSkge1xuICAgICAgICAgIHJldHVybiBvYmpba2V5XVxuICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAuaW5jbHVkZXMoc2VhcmNoS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZWFyY2hMb2NhbERhdGFCeShzZWFyY2hLZXk6IGFueSkge1xuICAgIGlmICghc2VhcmNoS2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXREYXRhU291cmNlKCk7XG4gICAgfVxuXG4gICAgaWYgKHNlYXJjaEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyTG9jYWxEYXRhQnkoc2VhcmNoS2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgfVxuXG4gIHNlYXJjaERhdGFPYnNlcnZhYmxlKHNlYXJjaEtleTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBhbnkpID0+IHtcbiAgICAgIG9ic2VydmVyLm5leHQodGhpcy5zZWFyY2hMb2NhbERhdGFCeShzZWFyY2hLZXkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgfVxufVxuIl19