import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var WavesDirective = /** @class */ (function () {
    function WavesDirective(el) {
        this.el = el;
    }
    WavesDirective.prototype.click = function (event) {
        if (!this.el.nativeElement.classList.contains('disabled')) {
            var button = this.el.nativeElement;
            if (!button.classList.contains('waves-effect')) {
                button.className += ' waves-effect';
            }
            var xPos = event.clientX - button.getBoundingClientRect().left;
            var yPos = event.clientY - button.getBoundingClientRect().top;
            var tmp = document.createElement('div');
            tmp.className += 'waves-ripple waves-rippling';
            var ripple = button.appendChild(tmp);
            var top_1 = yPos + 'px';
            var left = xPos + 'px';
            tmp.style.top = top_1;
            tmp.style.left = left;
            var scale = 'scale(' + (button.clientWidth / 100) * 3 + ') translate(0,0)';
            // tslint:disable-next-line: deprecation
            tmp.style.webkitTransform = scale;
            tmp.style.transform = scale;
            tmp.style.opacity = '1';
            var duration = 750;
            // tslint:disable-next-line: deprecation
            tmp.style.webkitTransitionDuration = duration + 'ms';
            tmp.style.transitionDuration = duration + 'ms';
            this.removeRipple(button, ripple);
        }
    };
    WavesDirective.prototype.removeRipple = function (button, ripple) {
        ripple.classList.remove('waves-rippling');
        setTimeout(function () {
            ripple.style.opacity = '0';
            setTimeout(function () {
                button.removeChild(ripple);
            }, 750);
        }, 200);
    };
    WavesDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], WavesDirective.prototype, "click", null);
    WavesDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
    ], WavesDirective);
WavesDirective.ɵfac = function WavesDirective_Factory(t) { return new (t || WavesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
WavesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: WavesDirective, selectors: [["", "mdbWavesEffect", ""]], hostBindings: function WavesDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WavesDirective_click_HostBindingHandler($event) { return ctx.click($event); });
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WavesDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbWavesEffect]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { click: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return WavesDirective;
}());
export { WavesDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F2ZXMtZWZmZWN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItYm9vdHN0cmFwLW1kL2xpYi9mcmVlL3dhdmVzL3dhdmVzLWVmZmVjdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFJcEU7QUFDb0IsSUFBbEIsd0JBQW1CLEVBQWM7QUFBSSxRQUFsQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQ3ZDLElBRVMsOEJBQUssR0FBWixVQUFhLEtBQVU7QUFDekIsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUMvRCxZQUFNLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0FBQzNDLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO0FBQ3RELGdCQUFRLE1BQU0sQ0FBQyxTQUFTLElBQUksZUFBZSxDQUFDO0FBQzVDLGFBQU87QUFDUCxZQUNNLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ3ZFLFlBQU0sSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDdEUsWUFDTSxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hELFlBQU0sR0FBRyxDQUFDLFNBQVMsSUFBSSw2QkFBNkIsQ0FBQztBQUNyRCxZQUFNLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0MsWUFDTSxJQUFNLEtBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQzlCLFlBQU0sSUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztBQUMvQixZQUNNLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUcsQ0FBQztBQUMxQixZQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUM1QixZQUNNLElBQU0sS0FBSyxHQUFHLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO0FBQ25GLFlBQ00sd0NBQXdDO0FBQzlDLFlBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ3hDLFlBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ2xDLFlBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQzlCLFlBQ00sSUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQzNCLFlBQ00sd0NBQXdDO0FBQzlDLFlBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQzNELFlBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3JELFlBQ00sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEMsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVILElBQUUscUNBQVksR0FBWixVQUFhLE1BQVcsRUFBRSxNQUFXO0FBQ3ZDLFFBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM5QyxRQUNJLFVBQVUsQ0FBQztBQUNULFlBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQ2pDLFlBQ00sVUFBVSxDQUFDO0FBQ1gsZ0JBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxZQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osSUFBRSxDQUFDO0FBQ0Y7QUFDeUQsZ0JBcERqQyxVQUFVO0FBQUc7QUFFL0IsSUFDTDtBQUFhLFFBRFosWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25DO0FBQ2dCO0FBQ2Q7QUFDSSwrQ0FnQ0o7QUFFSCxJQXpDYSxjQUFjLHdCQUgxQixTQUFTLENBQUMsY0FDVCxRQUFRLEVBQUUsM0NBRUosa0NBQ2lCLFVBQVU7Y0FITCxkQUdRLE9BRHpCLGNBQWMsQ0FvRDFCO0NBckRBLENBQUM7Ozs7Ozs7Ozs7OztvQkFzREY7QUFBQyxJQURELHFCQUFDO0FBQ0EsQ0FEQSxBQXBERCxJQW9EQztBQUNELFNBckRhLGNBQWM7QUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21kYldhdmVzRWZmZWN0XScsXG59KVxuZXhwb3J0IGNsYXNzIFdhdmVzRGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgcHVibGljIGNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgIGlmICghYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnd2F2ZXMtZWZmZWN0JykpIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSArPSAnIHdhdmVzLWVmZmVjdCc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHhQb3MgPSBldmVudC5jbGllbnRYIC0gYnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICBjb25zdCB5UG9zID0gZXZlbnQuY2xpZW50WSAtIGJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICAgIGNvbnN0IHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdG1wLmNsYXNzTmFtZSArPSAnd2F2ZXMtcmlwcGxlIHdhdmVzLXJpcHBsaW5nJztcbiAgICAgIGNvbnN0IHJpcHBsZSA9IGJ1dHRvbi5hcHBlbmRDaGlsZCh0bXApO1xuXG4gICAgICBjb25zdCB0b3AgPSB5UG9zICsgJ3B4JztcbiAgICAgIGNvbnN0IGxlZnQgPSB4UG9zICsgJ3B4JztcblxuICAgICAgdG1wLnN0eWxlLnRvcCA9IHRvcDtcbiAgICAgIHRtcC5zdHlsZS5sZWZ0ID0gbGVmdDtcblxuICAgICAgY29uc3Qgc2NhbGUgPSAnc2NhbGUoJyArIChidXR0b24uY2xpZW50V2lkdGggLyAxMDApICogMyArICcpIHRyYW5zbGF0ZSgwLDApJztcblxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkZXByZWNhdGlvblxuICAgICAgdG1wLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHNjYWxlO1xuICAgICAgdG1wLnN0eWxlLnRyYW5zZm9ybSA9IHNjYWxlO1xuICAgICAgdG1wLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gNzUwO1xuXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRlcHJlY2F0aW9uXG4gICAgICB0bXAuc3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb24gKyAnbXMnO1xuICAgICAgdG1wLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uICsgJ21zJztcblxuICAgICAgdGhpcy5yZW1vdmVSaXBwbGUoYnV0dG9uLCByaXBwbGUpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVJpcHBsZShidXR0b246IGFueSwgcmlwcGxlOiBhbnkpIHtcbiAgICByaXBwbGUuY2xhc3NMaXN0LnJlbW92ZSgnd2F2ZXMtcmlwcGxpbmcnKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmlwcGxlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBidXR0b24ucmVtb3ZlQ2hpbGQocmlwcGxlKTtcbiAgICAgIH0sIDc1MCk7XG4gICAgfSwgMjAwKTtcbiAgfVxufVxuIl19