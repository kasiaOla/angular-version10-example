import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let ModalOptions = class ModalOptions {
};
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function (t) { return ModalOptions.ɵfac(t); } });
export { ModalOptions };
let MDBModalRef = class MDBModalRef {
    /**
     * Hides the modal
     */
    hide() { }
};
MDBModalRef.ɵfac = function MDBModalRef_Factory(t) { return new (t || MDBModalRef)(); };
MDBModalRef.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MDBModalRef, factory: function (t) { return MDBModalRef.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MDBModalRef, [{
        type: Injectable
    }], null, null); })();
export { MDBModalRef };
const ɵ0 = {};
export const modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    containerClass: '',
    animated: true,
    scroll: false,
    data: ɵ0,
};
export const ClassName = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    SHOW: 'show',
};
export const Selector = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed',
};
export const TransitionDurations = {
    MODAL: 300,
    BACKDROP: 150,
};
export const DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc',
};
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwub3B0aW9ucy5qcyIsInNvdXJjZXMiOlsibmc6L2FuZ3VsYXItYm9vdHN0cmFwLW1kL2xpYi9mcmVlL21vZGFscy9tb2RhbC5vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0FBQ3pCLENBNkJDLENBQUE7QUE5QlksWUFBWSxvQkFEeEIsVUFBVSxFQUFFLElBQ0EsWUFBWSxDQThCeEI7Z0lBQ0Q7QUFDQSxTQWhDYSxZQUFZO0FBaUN6QixJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0FBQ3hCLElBSUU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLElBQUksS0FBVSxDQUFDO0FBQ2pCLENBQUMsQ0FBQTtBQVRZLFdBQVcsb0JBRHZCLFVBQVUsRUFBRSxJQUNBLFdBQVcsQ0FTdkI7Ozs7Ozs7MEJBQ0Q7QUFDQSxTQVhhLFdBQVc7QUFDdkIsV0FvQk8sRUFBRTtBQVZWLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFpQjtBQUNqRCxJQUFFLFFBQVEsRUFBRSxJQUFJO0FBQ2hCLElBQUUsUUFBUSxFQUFFLElBQUk7QUFDaEIsSUFBRSxLQUFLLEVBQUUsSUFBSTtBQUNiLElBQUUsSUFBSSxFQUFFLEtBQUs7QUFDYixJQUFFLG1CQUFtQixFQUFFLEtBQUs7QUFDNUIsSUFBRSxLQUFLLEVBQUUsRUFBRTtBQUNYLElBQUUsY0FBYyxFQUFFLEVBQUU7QUFDcEIsSUFBRSxRQUFRLEVBQUUsSUFBSTtBQUNoQixJQUFFLE1BQU0sRUFBRSxLQUFLO0FBQ2YsSUFBRSxJQUFJLElBQUk7QUFDVixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQVE7QUFDOUIsSUFBRSxrQkFBa0IsRUFBRSx5QkFBeUI7QUFDL0MsSUFBRSxRQUFRLEVBQUUsZ0JBQWdCO0FBQzVCLElBQUUsSUFBSSxFQUFFLFlBQVk7QUFDcEIsSUFBRSxJQUFJLEVBQUUsTUFBTTtBQUNkLElBQUUsRUFBRSxFQUFFLElBQUk7QUFBRSxJQUNWLElBQUksRUFBRSxNQUFNO0FBQUUsQ0FDZixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFRO0FBQzdCLElBQUUsTUFBTSxFQUFFLGVBQWU7QUFDekIsSUFBRSxXQUFXLEVBQUUsdUJBQXVCO0FBQ3RDLElBQUUsWUFBWSxFQUFFLHdCQUF3QjtBQUN4QyxJQUFFLGFBQWEsRUFBRSxvREFBb0Q7QUFDckUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQVE7QUFDeEMsSUFBRSxLQUFLLEVBQUUsR0FBRztBQUNaLElBQUUsUUFBUSxFQUFFLEdBQUc7QUFDZixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7QUFDL0IsSUFBRSxRQUFRLEVBQUUsZ0JBQWdCO0FBQzVCLElBQUUsR0FBRyxFQUFFLEtBQUs7QUFDWixDQUFDLENBQUM7QUFDRjtBQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kYWxPcHRpb25zIHtcbiAgLyoqXG4gICAqICBJbmNsdWRlcyBhIG1vZGFsLWJhY2tkcm9wIGVsZW1lbnQuIEFsdGVybmF0aXZlbHksIHNwZWNpZnkgc3RhdGljIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgKi9cbiAgYmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYycgfCBhbnk7XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgKi9cbiAga2V5Ym9hcmQ/OiBib29sZWFuO1xuXG4gIGZvY3VzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNob3dzIHRoZSBtb2RhbCB3aGVuIGluaXRpYWxpemVkLlxuICAgKi9cbiAgc2hvdz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZ25vcmUgdGhlIGJhY2tkcm9wIGNsaWNrXG4gICAqL1xuICBpZ25vcmVCYWNrZHJvcENsaWNrPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENzcyBjbGFzcyBmb3Igb3BlbmVkIG1vZGFsXG4gICAqL1xuICBjbGFzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRvZ2dsZSBhbmltYXRpb25cbiAgICovXG4gIGNvbnRhaW5lckNsYXNzPzogc3RyaW5nO1xuICBhbmltYXRlZD86IGJvb2xlYW47XG4gIHNjcm9sbD86IGJvb2xlYW47XG4gIGRhdGE/OiBPYmplY3Q7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNREJNb2RhbFJlZiB7XG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gYSBjb21wb25lbnQgaW5zaWRlIHRoZSBtb2RhbC4gTnVsbCBpZiBtb2RhbCdzIGJlZW4gY3JlYXRlZCB3aXRoIFRlbXBsYXRlUmVmXG4gICAqL1xuICBjb250ZW50PzogYW55IHwgbnVsbDtcbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBtb2RhbFxuICAgKi9cbiAgaGlkZSgpOiB2b2lkIHt9XG59XG5cbmV4cG9ydCBjb25zdCBtb2RhbENvbmZpZ0RlZmF1bHRzOiBNb2RhbE9wdGlvbnMgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWUsXG4gIHNob3c6IGZhbHNlLFxuICBpZ25vcmVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgY2xhc3M6ICcnLFxuICBjb250YWluZXJDbGFzczogJycsXG4gIGFuaW1hdGVkOiB0cnVlLFxuICBzY3JvbGw6IGZhbHNlLFxuICBkYXRhOiB7fSxcbn07XG5cbmV4cG9ydCBjb25zdCBDbGFzc05hbWU6IGFueSA9IHtcbiAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICBGQURFOiAnZmFkZScsXG4gIElOOiAnaW4nLCAvLyBiczNcbiAgU0hPVzogJ3Nob3cnLCAvLyBiczRcbn07XG5cbmV4cG9ydCBjb25zdCBTZWxlY3RvcjogYW55ID0ge1xuICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gIEZJWEVEX0NPTlRFTlQ6ICcubmF2YmFyLWZpeGVkLXRvcCwgLm5hdmJhci1maXhlZC1ib3R0b20sIC5pcy1maXhlZCcsXG59O1xuXG5leHBvcnQgY29uc3QgVHJhbnNpdGlvbkR1cmF0aW9uczogYW55ID0ge1xuICBNT0RBTDogMzAwLFxuICBCQUNLRFJPUDogMTUwLFxufTtcblxuZXhwb3J0IGNvbnN0IERJU01JU1NfUkVBU09OUyA9IHtcbiAgQkFDS1JET1A6ICdiYWNrZHJvcC1jbGljaycsXG4gIEVTQzogJ2VzYycsXG59O1xuIl19