import { __decorate, __metadata, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Renderer2, Input, AfterViewInit, HostListener, PLATFORM_ID, Inject, AfterViewChecked, OnInit, DoCheck, OnChanges, SimpleChanges, } from '@angular/core';
import { DOWN_ARROW, UP_ARROW } from '../utils/keyboard-navigation';
import * as Éµngcc0 from '@angular/core';
let MdbInputDirective = class MdbInputDirective {
    constructor(_elRef, _renderer, platformId) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.el = null;
        this.elLabel = null;
        this.elIcon = null;
        this.element = null;
        this.mdbValidate = true;
        this.validateSuccess = true;
        this.validateError = true;
        this.focusCheckbox = true;
        this.focusRadio = true;
        this.isBrowser = false;
        this.isClicked = false;
        this.isBrowser = isPlatformBrowser(platformId);
    }
    onfocus() {
        try {
            this._renderer.addClass(this.elLabel, 'active');
            this.isClicked = true;
        }
        catch (error) { }
    }
    onblur() {
        this.validationFunction();
        try {
            if (this.el.nativeElement.value === '') {
                this._renderer.removeClass(this.elLabel, 'active');
            }
            this.isClicked = false;
        }
        catch (error) { }
    }
    onchange() {
        try {
            this.checkValue();
        }
        catch (error) { }
    }
    oniput() {
        this.validationFunction();
    }
    onkeydown(event) {
        try {
            if (event.target.type === 'number') {
                if (event.shiftKey) {
                    switch (event.keyCode) {
                        case UP_ARROW:
                            event.target.value = +event.target.value + 10;
                            break;
                        case DOWN_ARROW:
                            event.target.value = +event.target.value - 10;
                            break;
                    }
                }
                if (event.altKey) {
                    switch (event.keyCode) {
                        case UP_ARROW:
                            event.target.value = +event.target.value + 0.1;
                            break;
                        case DOWN_ARROW:
                            event.target.value = +event.target.value - 0.1;
                            break;
                    }
                }
            }
        }
        catch (error) { }
        this.delayedResize();
    }
    oncut() {
        try {
            setTimeout(() => {
                this.delayedResize();
            }, 0);
        }
        catch (error) { }
    }
    onpaste() {
        try {
            setTimeout(() => {
                this.delayedResize();
            }, 0);
        }
        catch (error) { }
    }
    ondrop() {
        try {
            setTimeout(() => {
                this.delayedResize();
            }, 0);
        }
        catch (error) { }
    }
    updateErrorMsg(value) {
        if (this.wrongTextContainer) {
            this.wrongTextContainer.innerHTML = value;
        }
    }
    updateSuccessMsg(value) {
        if (this.rightTextContainer) {
            this.rightTextContainer.innerHTML = value;
        }
    }
    ngOnInit() {
        try {
            setTimeout(() => {
                this.delayedResize();
            }, 0);
        }
        catch (error) {
            console.log(error);
        }
        // Inititalise a new <span> wrong/right elements and render it below the host component.
        if (this.mdbValidate) {
            this.wrongTextContainer = this._renderer.createElement('span');
            this._renderer.addClass(this.wrongTextContainer, 'inputVal');
            this._renderer.addClass(this.wrongTextContainer, 'text-danger');
            this._renderer.appendChild(this._elRef.nativeElement.parentElement, this.wrongTextContainer);
            const textWrong = this._elRef.nativeElement.getAttribute('data-error');
            this.wrongTextContainer.innerHTML = textWrong ? textWrong : 'wrong';
            if (!textWrong && this.errorMessage !== undefined) {
                this.wrongTextContainer.innerHTML = this.errorMessage;
            }
            this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'hidden');
            this.rightTextContainer = this._renderer.createElement('span');
            this._renderer.addClass(this.rightTextContainer, 'inputVal');
            this._renderer.addClass(this.rightTextContainer, 'text-success');
            this._renderer.appendChild(this._elRef.nativeElement.parentElement, this.rightTextContainer);
            const textSuccess = this._elRef.nativeElement.getAttribute('data-success');
            this.rightTextContainer.innerHTML = textSuccess ? textSuccess : 'success';
            if (!textSuccess && this.successMessage !== undefined) {
                this.rightTextContainer.innerHTML = this.successMessage;
            }
            this._renderer.setStyle(this.rightTextContainer, 'visibility', 'hidden');
        }
    }
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('errorMessage')) {
            const newErrorMsg = changes.errorMessage.currentValue;
            this.updateErrorMsg(newErrorMsg);
        }
        if (changes.hasOwnProperty('successMessage')) {
            const newSuccessMsg = changes.successMessage.currentValue;
            this.updateSuccessMsg(newSuccessMsg);
        }
    }
    ngDoCheck() {
        if (this.mdbValidate &&
            this._elRef.nativeElement.classList.contains('ng-valid') &&
            this._elRef.nativeElement.classList.contains('ng-dirty') &&
            !this._elRef.nativeElement.classList.contains('counter-success')) {
            this._renderer.addClass(this._elRef.nativeElement, 'counter-success');
            this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'hidden');
            this._renderer.setStyle(this.rightTextContainer, 'visibility', 'visible');
            this._renderer.setStyle(this.rightTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
            this._renderer.setStyle(this.wrongTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
        }
        if (this.mdbValidate &&
            this._elRef.nativeElement.classList.contains('ng-invalid') &&
            this._elRef.nativeElement.classList.contains('ng-dirty') &&
            !this._elRef.nativeElement.classList.contains('counter-danger')) {
            this._renderer.addClass(this._elRef.nativeElement, 'counter-danger');
            this._renderer.setStyle(this.rightTextContainer, 'visibility', 'hidden');
            this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'visible');
            this._renderer.setStyle(this.rightTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
            this._renderer.setStyle(this.wrongTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
        }
        if ((this._elRef.nativeElement.classList.contains('ng-invalid') &&
            this._elRef.nativeElement.classList.contains('ng-pristine') &&
            this._elRef.nativeElement.classList.contains('ng-untouched')) ||
            this._elRef.nativeElement.disabled) {
            if (this._elRef.nativeElement.classList.contains('counter-success')) {
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-success');
                this._renderer.setStyle(this.rightTextContainer, 'visibility', 'hidden');
            }
            else if (this._elRef.nativeElement.classList.contains('counter-danger')) {
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-danger');
                this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'hidden');
            }
        }
        if (!this.validateSuccess) {
            this._renderer.removeClass(this._elRef.nativeElement, 'counter-success');
            this._renderer.setStyle(this.rightTextContainer, 'display', 'none');
            if (this._elRef.nativeElement.classList.contains('ng-valid')) {
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-danger');
            }
        }
        if (!this.validateError) {
            this._renderer.removeClass(this._elRef.nativeElement, 'counter-danger');
            this._renderer.setStyle(this.wrongTextContainer, 'display', 'none');
            if (this._elRef.nativeElement.classList.contains('ng-invalid')) {
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-success');
            }
        }
    }
    validationFunction() {
        setTimeout(() => {
            if (this._elRef.nativeElement.classList.contains('ng-invalid')) {
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-success');
                this._renderer.removeClass(this._elRef.nativeElement, 'counter-danger');
            }
            if (this._elRef.nativeElement.classList.contains('ng-touched') &&
                this._elRef.nativeElement.classList.contains('ng-invalid')) {
                if (this.mdbValidate) {
                    this._renderer.addClass(this._elRef.nativeElement, 'counter-danger');
                    this._renderer.setStyle(this.rightTextContainer, 'visibility', 'hidden');
                    this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'visible');
                    this._renderer.setStyle(this.rightTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
                    this._renderer.setStyle(this.wrongTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
                }
            }
            else if (this._elRef.nativeElement.classList.contains('ng-touched') &&
                this._elRef.nativeElement.classList.contains('ng-valid')) {
                if (this.mdbValidate) {
                    this._renderer.addClass(this._elRef.nativeElement, 'counter-success');
                    this._renderer.setStyle(this.rightTextContainer, 'visibility', 'visible');
                    this._renderer.setStyle(this.wrongTextContainer, 'visibility', 'hidden');
                    this._renderer.setStyle(this.rightTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
                    this._renderer.setStyle(this.wrongTextContainer, 'top', this._elRef.nativeElement.offsetHeight + 'px');
                }
            }
        }, 0);
    }
    ngAfterViewInit() {
        if (this.isBrowser) {
            try {
                this.element = document.querySelector('.md-textarea-auto');
            }
            catch (error) { }
        }
        const type = this.el.nativeElement.type;
        if (this.focusCheckbox && type === 'checkbox') {
            this._renderer.addClass(this.el.nativeElement, 'onFocusSelect');
        }
        if (this.focusRadio && type === 'radio') {
            this._renderer.addClass(this.el.nativeElement, 'onFocusSelect');
        }
    }
    ngAfterViewChecked() {
        this.initComponent();
        this.checkValue();
    }
    resize() {
        if (this.el.nativeElement.classList.contains('md-textarea-auto')) {
            this._renderer.setStyle(this.el.nativeElement, 'height', 'auto');
            this._renderer.setStyle(this.el.nativeElement, 'height', this.el.nativeElement.scrollHeight + 'px');
        }
    }
    delayedResize() {
        setTimeout(() => {
            this.resize();
        }, 0);
    }
    initComponent() {
        let inputId;
        let inputP;
        if (this.isBrowser) {
            try {
                inputId = this.el.nativeElement.id;
            }
            catch (err) { }
            try {
                inputP = this.el.nativeElement.parentNode;
            }
            catch (err) { }
            this.elLabel =
                inputP.querySelector('label[for="' + inputId + '"]') || inputP.querySelector('label');
            if (this.elLabel && this.el.nativeElement.value !== '') {
                this._renderer.addClass(this.elLabel, 'active');
            }
            this.elIcon = inputP.querySelector('i') || false;
            if (this.elIcon) {
                this._renderer.addClass(this.elIcon, 'active');
            }
        }
    }
    checkValue() {
        let value = '';
        if (this.elLabel != null) {
            value = this.el.nativeElement.value || '';
            if (value === '') {
                this._renderer.removeClass(this.elLabel, 'active');
                if (this.elIcon) {
                    this._renderer.removeClass(this.elIcon, 'active');
                }
                // tslint:disable-next-line:max-line-length
            }
            if ((value === '' && this.isClicked) ||
                (value === '' && this.el.nativeElement.placeholder) ||
                (value === '' && this.el.nativeElement.attributes.placeholder)) {
                this._renderer.addClass(this.elLabel, 'active');
            }
        }
    }
};
MdbInputDirective.Éµfac = function MdbInputDirective_Factory(t) { return new (t || MdbInputDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID)); };
MdbInputDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: MdbInputDirective, selectors: [["", "mdbInputDirective", ""]], hostBindings: function MdbInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµlistener("focus", function MdbInputDirective_focus_HostBindingHandler() { return ctx.onfocus(); })("blur", function MdbInputDirective_blur_HostBindingHandler() { return ctx.onblur(); })("change", function MdbInputDirective_change_HostBindingHandler() { return ctx.onchange(); })("input", function MdbInputDirective_input_HostBindingHandler() { return ctx.oniput(); })("keydown", function MdbInputDirective_keydown_HostBindingHandler($event) { return ctx.onkeydown($event); })("cut", function MdbInputDirective_cut_HostBindingHandler() { return ctx.oncut(); })("paste", function MdbInputDirective_paste_HostBindingHandler() { return ctx.onpaste(); })("drop", function MdbInputDirective_drop_HostBindingHandler() { return ctx.ondrop(); });
    } }, inputs: { mdbValidate: "mdbValidate", validateSuccess: "validateSuccess", validateError: "validateError", focusCheckbox: "focusCheckbox", focusRadio: "focusRadio", mdbInputDirective: "mdbInputDirective", customRegex: "customRegex", errorMessage: "errorMessage", successMessage: "successMessage" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });
MdbInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", MdbInputDirective)
], MdbInputDirective.prototype, "mdbInputDirective", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "customRegex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "mdbValidate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "validateSuccess", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "validateError", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "focusCheckbox", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], MdbInputDirective.prototype, "focusRadio", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbInputDirective.prototype, "errorMessage", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbInputDirective.prototype, "successMessage", void 0);
__decorate([
    HostListener('focus'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "onfocus", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "onblur", null);
__decorate([
    HostListener('change'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "onchange", null);
__decorate([
    HostListener('input'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "oniput", null);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "onkeydown", null);
__decorate([
    HostListener('cut'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "oncut", null);
__decorate([
    HostListener('paste'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "onpaste", null);
__decorate([
    HostListener('drop'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MdbInputDirective.prototype, "ondrop", null);
MdbInputDirective = __decorate([ __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2, String])
], MdbInputDirective);
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(MdbInputDirective, [{
        type: Directive,
        args: [{
                selector: '[mdbInputDirective]'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.Renderer2 }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { mdbValidate: [{
            type: Input
        }], validateSuccess: [{
            type: Input
        }], validateError: [{
            type: Input
        }], focusCheckbox: [{
            type: Input
        }], focusRadio: [{
            type: Input
        }], onfocus: [{
            type: HostListener,
            args: ['focus']
        }], onblur: [{
            type: HostListener,
            args: ['blur']
        }], onchange: [{
            type: HostListener,
            args: ['change']
        }], oniput: [{
            type: HostListener,
            args: ['input']
        }], onkeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], oncut: [{
            type: HostListener,
            args: ['cut']
        }], onpaste: [{
            type: HostListener,
            args: ['paste']
        }], ondrop: [{
            type: HostListener,
            args: ['drop']
        }], mdbInputDirective: [{
            type: Input
        }], customRegex: [{
            type: Input
        }], errorMessage: [{
            type: Input
        }], successMessage: [{
            type: Input
        }] }); })();
export { MdbInputDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,