import { __decorate, __metadata } from "tslib";
import { Component, Input, ElementRef, OnInit, Renderer2, ChangeDetectionStrategy, } from '@angular/core';
import { Utils } from '../utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = function (a0, a1, a2, a3, a4) { return { fas: a0, far: a1, fab: a2, fal: a3, fad: a4 }; };
let MdbIconComponent = class MdbIconComponent {
    constructor(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
        this.fab = false;
        this.far = false;
        this.fal = false;
        this.fad = false;
        this.fas = true;
        this.sizeClass = '';
        this.utils = new Utils();
    }
    ngOnInit() {
        if (this.size) {
            this.sizeClass = `fa-${this.size}`;
        }
        const classList = this._el.nativeElement.classList;
        this.fab = classList.contains('fab');
        this.far = classList.contains('far');
        this.fas = classList.contains('fas');
        this.fal = classList.contains('fal');
        this.fad = classList.contains('fad');
        const formWrapper = this.utils.getClosestEl(this._el.nativeElement, '.md-form') ||
            this.utils.getClosestEl(this._el.nativeElement, '.md-outline');
        if (formWrapper) {
            formWrapper.childNodes.forEach((el) => {
                if (el.tagName === 'INPUT' || 'TEXTAREA') {
                    this._renderer.listen(el, 'focus', () => {
                        this._renderer.addClass(this._el.nativeElement, 'active');
                    });
                    this._renderer.listen(el, 'blur', () => {
                        this._renderer.removeClass(this._el.nativeElement, 'active');
                    });
                }
            });
        }
    }
};
MdbIconComponent.ɵfac = function MdbIconComponent_Factory(t) { return new (t || MdbIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MdbIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MdbIconComponent, selectors: [["mdb-icon"]], inputs: { icon: "icon", size: "size", class: "class", classInside: "classInside" }, decls: 1, vars: 13, consts: [[3, "ngClass"]], template: function MdbIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "i", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate4("fa-", ctx.icon, " ", ctx.class, " ", ctx.classInside, " ", ctx.sizeClass, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction5(7, _c0, ctx.fas, ctx.far, ctx.fab, ctx.fal, ctx.fad));
    } }, directives: [ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
MdbIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbIconComponent.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbIconComponent.prototype, "size", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbIconComponent.prototype, "class", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MdbIconComponent.prototype, "classInside", void 0);
MdbIconComponent = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
], MdbIconComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdbIconComponent, [{
        type: Component,
        args: [{
                selector: 'mdb-icon',
                template: "<i\n  [ngClass]=\"{ fas: fas, far: far, fab: fab, fal: fal, fad: fad }\"\n  class=\"fa-{{ icon }} {{ class }} {{ classInside }} {{ sizeClass }}\"\n></i>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { icon: [{
            type: Input
        }], size: [{
            type: Input
        }], class: [{
            type: Input
        }], classInside: [{
            type: Input
        }] }); })();
export { MdbIconComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9hbmd1bGFyLWJvb3RzdHJhcC1tZC9saWIvZnJlZS9pY29ucy9pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLE1BQU0sRUFDTixTQUFTLEVBQ1QsdUJBQXVCLEdBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7O0FBT2pDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQUcsSUFnQjlCLFlBQW9CLEdBQWUsRUFBVSxTQUFvQjtBQUFJLFFBQWpELFFBQUcsR0FBSCxHQUFHLENBQVk7QUFBQyxRQUFTLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQVZsRSxRQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2QsUUFBRSxRQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2QsUUFBRSxRQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2QsUUFBRSxRQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ2QsUUFBRSxRQUFHLEdBQUcsSUFBSSxDQUFDO0FBQ2IsUUFDRSxjQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLFFBQ0UsVUFBSyxHQUFVLElBQUksS0FBSyxFQUFFLENBQUM7QUFDN0IsSUFDc0UsQ0FBQztBQUN2RSxJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNuQixZQUFNLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDekMsU0FBSztBQUNMLFFBQ0ksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0FBQ3ZELFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pDLFFBQ0ksTUFBTSxXQUFXLEdBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDO0FBQ2pFLFlBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDckUsUUFDSSxJQUFJLFdBQVcsRUFBRTtBQUNyQixZQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBTyxFQUFFLEVBQUU7QUFDakQsZ0JBQVEsSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLE9BQU8sSUFBSSxVQUFVLEVBQUU7QUFDbEQsb0JBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7QUFDbEQsd0JBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEUsb0JBQVUsQ0FBQyxDQUFDLENBQUM7QUFDYixvQkFBVSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNqRCx3QkFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RSxvQkFBVSxDQUFDLENBQUMsQ0FBQztBQUNiLGlCQUFTO0FBQ1QsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxDQUFDOzs7Ozs7OytFQUFBO0FBQ0Q7QUFBMEMsWUFoQ2YsVUFBVTtBQUFJLFlBQWlCLFNBQVM7QUFBRztBQWYzRDtBQUFhLElBQXJCLEtBQUssRUFBRTtBQUFFO0FBRVosOENBRndCO0FBQ2I7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBRTtBQUNhLDhDQUREO0FBQ2I7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBRTtBQUNZLCtDQURDO0FBQ2Q7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBRTtBQUdWLHFEQUg2QjtBQUpsQixnQkFBZ0Isb0JBTDVCLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRSxVQUFVLFVBQ3BCLHZEQUdFLGtDQWdCdUIsVUFBVSxFQUFxQixTQUFTO0FBQUcsR0FoQnpELGdCQUFnQixDQStDNUI7Ozs7d0JBbERxQyxVQUNwQztXQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxNQUNoRCxDQUFDOzs7Ozs7Ozs7OztvQkFpREY7QUFBQyxTQWhEWSxnQkFBZ0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL3V0aWxzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWRiLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vaWNvbi5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xuICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzSW5zaWRlOiBzdHJpbmc7XG5cbiAgZmFiID0gZmFsc2U7XG4gIGZhciA9IGZhbHNlO1xuICBmYWwgPSBmYWxzZTtcbiAgZmFkID0gZmFsc2U7XG4gIGZhcyA9IHRydWU7XG5cbiAgc2l6ZUNsYXNzID0gJyc7XG5cbiAgdXRpbHM6IFV0aWxzID0gbmV3IFV0aWxzKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSkge1xuICAgICAgdGhpcy5zaXplQ2xhc3MgPSBgZmEtJHt0aGlzLnNpemV9YDtcbiAgICB9XG5cbiAgICBjb25zdCBjbGFzc0xpc3QgPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdDtcbiAgICB0aGlzLmZhYiA9IGNsYXNzTGlzdC5jb250YWlucygnZmFiJyk7XG4gICAgdGhpcy5mYXIgPSBjbGFzc0xpc3QuY29udGFpbnMoJ2ZhcicpO1xuICAgIHRoaXMuZmFzID0gY2xhc3NMaXN0LmNvbnRhaW5zKCdmYXMnKTtcbiAgICB0aGlzLmZhbCA9IGNsYXNzTGlzdC5jb250YWlucygnZmFsJyk7XG4gICAgdGhpcy5mYWQgPSBjbGFzc0xpc3QuY29udGFpbnMoJ2ZhZCcpO1xuXG4gICAgY29uc3QgZm9ybVdyYXBwZXIgPVxuICAgICAgdGhpcy51dGlscy5nZXRDbG9zZXN0RWwodGhpcy5fZWwubmF0aXZlRWxlbWVudCwgJy5tZC1mb3JtJykgfHxcbiAgICAgIHRoaXMudXRpbHMuZ2V0Q2xvc2VzdEVsKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsICcubWQtb3V0bGluZScpO1xuXG4gICAgaWYgKGZvcm1XcmFwcGVyKSB7XG4gICAgICBmb3JtV3JhcHBlci5jaGlsZE5vZGVzLmZvckVhY2goKGVsOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgJ1RFWFRBUkVBJykge1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmxpc3RlbihlbCwgJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmxpc3RlbihlbCwgJ2JsdXInLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCAnYWN0aXZlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19